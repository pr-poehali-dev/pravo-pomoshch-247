import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
}

export default function ChatBot() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É –∫–∞–∫–∞—è –ø–æ–º–æ—â—å –≤–∞–º –Ω—É–∂–Ω–∞.',
      isBot: true,
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  const botResponses = [
    {
      keywords: ['–¥–µ–ø–æ—Ä—Ç–∞—Ü–∏—è', '–∑–∞–¥–µ—Ä–∂–∞–ª–∏', '–º–∏–≥—Ä–∞—Ü–∏—è', '–≤–Ω–∂', '—Ä–≤–ø', '–ø–∞—Ç–µ–Ω—Ç'],
      response: '–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –ø—Ä–∞–≤–æ–º. –ù–∞—à–∏ —é—Ä–∏—Å—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Ç–∞–∫–∏—Ö –¥–µ–ª–∞—Ö. –ú—ã –ø–æ–º–æ–∂–µ–º —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ–º –æ—Ç–∫–∞–∑–æ–≤ –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç 15 000 ‚ÇΩ, —Å—Ä–æ–∫ –æ—Ç 2 –Ω–µ–¥–µ–ª—å.'
    },
    {
      keywords: ['–ø–µ–Ω—Å–∏—è', '–ø—Ñ—Ä', '–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç', '–¥–æ–ø–ª–∞—Ç–∞'],
      response: '–í–æ–ø—Ä–æ—Å—ã —Å –ø–µ–Ω—Å–∏–µ–π —Ä–µ—à–∞–µ–º –±—ã—Å—Ç—Ä–æ! –ù–∞—à–∏ —é—Ä–∏—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã –ü–§–† –∏ –ø–æ–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–ª–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–ª–æ–∂–µ–Ω–∞. –í —Å—Ä–µ–¥–Ω–µ–º –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –æ—Ç 30 000 ‚ÇΩ –¥–æ–ø–ª–∞—Ç—ã. –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –æ—Ç 10 000 ‚ÇΩ.'
    },
    {
      keywords: ['–∞—Ä–±–∏—Ç—Ä–∞–∂', '–¥–æ–ª–≥', '–¥–æ–≥–æ–≤–æ—Ä', '–±–∏–∑–Ω–µ—Å', '–ø–∞—Ä—Ç–Ω–µ—Ä'],
      response: '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–ø–æ—Ä—ã - –Ω–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è. –ü–æ–º–æ–∂–µ–º –≤–∑—ã—Å–∫–∞—Ç—å –¥–æ–ª–≥–∏, –∑–∞—â–∏—Ç–∏—Ç—å –±–∏–∑–Ω–µ—Å –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç 25 000 ‚ÇΩ, —Å—Ä–æ–∫ –æ—Ç 2 –Ω–µ–¥–µ–ª—å.'
    },
    {
      keywords: ['—Å—Ä–æ—á–Ω–æ', '–∞–¥–≤–æ–∫–∞—Ç', '—Å—É–¥', '–ø–æ–ª–∏—Ü–∏—è'],
      response: 'üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è! –ù–∞—à –∞–¥–≤–æ–∫–∞—Ç –º–æ–∂–µ—Ç –≤—ã–µ—Ö–∞—Ç—å –∫ –≤–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –†–∞–±–æ—Ç–∞–µ–º 24/7, –¥–∞–∂–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤—ã–µ–∑–¥–∞ –æ—Ç 5 000 ‚ÇΩ.'
    }
  ];

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputMessage,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate bot response delay
    setTimeout(() => {
      let botResponse = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —é—Ä–∏—Å—Ç–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!';

      // Find matching response based on keywords
      const lowerMessage = inputMessage.toLowerCase();
      for (const response of botResponses) {
        if (response.keywords.some(keyword => lowerMessage.includes(keyword))) {
          botResponse = response.response;
          break;
        }
      }

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        isBot: true,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <>
      {/* Chat Button */}
      {!isOpen && (
        <div className="fixed bottom-6 right-6 z-50">
          <Button
            onClick={() => setIsOpen(true)}
            size="lg"
            className="rounded-full w-16 h-16 shadow-lg hover:shadow-xl transition-all duration-300 animate-pulse"
          >
            <Icon name="MessageCircle" size={28} />
          </Button>
          <div className="absolute -top-2 -right-2">
            <Badge variant="destructive" className="rounded-full px-2 py-1 text-xs animate-bounce">
              24/7
            </Badge>
          </div>
        </div>
      )}

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-6 right-6 z-50 w-96 max-w-[calc(100vw-3rem)]">
          <Card className="shadow-xl">
            <CardHeader className="bg-primary text-white rounded-t-lg">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Icon name="Scale" size={20} />
                  <div>
                    <CardTitle className="text-lg">–ü—Ä–∞–≤–æ–ü–æ–º–æ—â—å 24/7</CardTitle>
                    <p className="text-xs opacity-90">–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –æ–Ω–ª–∞–π–Ω</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsOpen(false)}
                  className="text-white hover:bg-white/20 p-2"
                >
                  <Icon name="X" size={16} />
                </Button>
              </div>
            </CardHeader>
            
            <CardContent className="p-0">
              {/* Messages */}
              <div className="h-80 overflow-y-auto p-4 space-y-3">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
                  >
                    <div
                      className={`max-w-[80%] p-3 rounded-lg text-sm ${
                        message.isBot
                          ? 'bg-gray-100 text-gray-800'
                          : 'bg-primary text-white'
                      }`}
                    >
                      {message.text}
                      <div className={`text-xs mt-1 opacity-60`}>
                        {message.timestamp.toLocaleTimeString('ru-RU', {
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </div>
                    </div>
                  </div>
                ))}
                
                {isTyping && (
                  <div className="flex justify-start">
                    <div className="bg-gray-100 p-3 rounded-lg text-sm">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Input */}
              <div className="p-4 border-t">
                <div className="flex space-x-2">
                  <Input
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é..."
                    className="flex-1"
                    disabled={isTyping}
                  />
                  <Button
                    onClick={handleSendMessage}
                    size="sm"
                    disabled={!inputMessage.trim() || isTyping}
                  >
                    <Icon name="Send" size={16} />
                  </Button>
                </div>
                <div className="flex flex-wrap gap-2 mt-2">
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-xs"
                    onClick={() => setInputMessage('–ü—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π')}
                  >
                    –ú–∏–≥—Ä–∞—Ü–∏—è
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-xs"
                    onClick={() => setInputMessage('–ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–µ–Ω—Å–∏–∏')}
                  >
                    –ü–µ–Ω—Å–∏–∏
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-xs"
                    onClick={() => setInputMessage('–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å–ø–æ—Ä')}
                  >
                    –ê—Ä–±–∏—Ç—Ä–∞–∂
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </>
  );
}