import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface ConsultationRequest {
  id: string;
  name: string;
  phone: string;
  region: string;
  problem: string;
  service?: string;
  timestamp: string;
  status: 'new' | 'in_progress' | 'completed';
}

export default function AdminPanel() {
  const [requests, setRequests] = useState<ConsultationRequest[]>([]);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –∏–∑ localStorage
    const savedRequests = localStorage.getItem('consultation_requests');
    if (savedRequests) {
      setRequests(JSON.parse(savedRequests));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∫–∏
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('admin') === 'true') {
      setIsVisible(true);
    }
  }, []);

  const updateRequestStatus = (id: string, status: ConsultationRequest['status']) => {
    const updatedRequests = requests.map(req => 
      req.id === id ? { ...req, status } : req
    );
    setRequests(updatedRequests);
    localStorage.setItem('consultation_requests', JSON.stringify(updatedRequests));
  };

  const clearAllRequests = () => {
    setRequests([]);
    localStorage.removeItem('consultation_requests');
  };

  const copyToTelegram = (request: ConsultationRequest) => {
    const message = `üÜò –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ

üë§ –ò–º—è: ${request.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${request.phone}
üó∫Ô∏è –†–µ–≥–∏–æ–Ω: ${request.region}
üéØ –£—Å–ª—É–≥–∞: ${request.service || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚ùì –ü—Ä–æ–±–ª–µ–º–∞: ${request.problem}

üìÖ –í—Ä–µ–º—è: ${request.timestamp}`;

    navigator.clipboard.writeText(message);
    alert('–ó–∞—è–≤–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ Telegram @zakazandy_bot');
  };

  if (!isVisible) {
    return null;
  }

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-auto">
        <div className="p-6 border-b flex justify-between items-center">
          <h2 className="text-2xl font-bold">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞—è–≤–æ–∫</h2>
          <div className="flex gap-2">
            <Button variant="outline" onClick={clearAllRequests}>
              <Icon name="Trash2" size={16} className="mr-2" />
              –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
            </Button>
            <Button variant="ghost" onClick={() => setIsVisible(false)}>
              <Icon name="X" size={16} />
            </Button>
          </div>
        </div>

        <div className="p-6">
          {requests.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <Icon name="Inbox" size={48} className="mx-auto mb-4 opacity-50" />
              <p>–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>
            </div>
          ) : (
            <div className="space-y-4">
              {requests.map((request) => (
                <Card key={request.id} className={`border-l-4 ${
                  request.status === 'new' ? 'border-l-red-500' :
                  request.status === 'in_progress' ? 'border-l-yellow-500' :
                  'border-l-green-500'
                }`}>
                  <CardHeader className="pb-2">
                    <div className="flex justify-between items-start">
                      <CardTitle className="text-lg">{request.name}</CardTitle>
                      <div className="flex gap-2">
                        <select 
                          value={request.status} 
                          onChange={(e) => updateRequestStatus(request.id, e.target.value as ConsultationRequest['status'])}
                          className="text-sm border rounded px-2 py-1"
                        >
                          <option value="new">–ù–æ–≤–∞—è</option>
                          <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
                          <option value="completed">–í—ã–ø–æ–ª–Ω–µ–Ω–∞</option>
                        </select>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => copyToTelegram(request)}
                        >
                          <Icon name="Copy" size={14} className="mr-1" />
                          –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                      <div>
                        <strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> {request.phone}
                      </div>
                      <div>
                        <strong>üó∫Ô∏è –†–µ–≥–∏–æ–Ω:</strong> {request.region}
                      </div>
                      <div className="md:col-span-2">
                        <strong>üéØ –£—Å–ª—É–≥–∞:</strong> {request.service || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </div>
                      <div className="md:col-span-2">
                        <strong>‚ùì –ü—Ä–æ–±–ª–µ–º–∞:</strong> {request.problem}
                      </div>
                      <div className="md:col-span-2 text-gray-500">
                        <strong>üìÖ –í—Ä–µ–º—è:</strong> {request.timestamp}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}